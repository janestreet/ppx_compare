open! Base

module A : sig
  type t

  val compare : t -> t -> int
  val equal : t -> t -> bool
end = struct
  type t = int [@@deriving compare, equal]
end

module A1 : sig
  type 'a t

  val compare : ('a -> 'a -> int) -> 'a t -> 'a t -> int
  val equal : ('a -> 'a -> bool) -> 'a t -> 'a t -> bool
end = struct
  type 'a t = 'a list [@@deriving compare, equal]
end

type simple_rec =
  { x : int
  ; y : A.t @@ global
  }
[@@deriving compare ~localize, equal ~localize]

[%%expect
  {|
Line _, characters _-_:
Error: Unbound value A.compare__local
|}]

type simple_var =
  | A of int
  | B of A.t @@ global
[@@deriving compare ~localize, equal ~localize]

[%%expect
  {|
Line _, characters _-_:
Error: Unbound value A.compare__local
|}]

type simple_rec1 =
  { x : int
  ; y : string A1.t @@ global
  }
[@@deriving compare ~localize, equal ~localize]

[%%expect
  {|
Line _, characters _-_:
Error: Unbound value A1.compare__local
|}]

type simple_var1 =
  | A of int
  | B of string A1.t @@ global
[@@deriving compare ~localize, equal ~localize]

[%%expect
  {|
Line _, characters _-_:
Error: Unbound value A1.compare__local
|}]

type 'a might_need_eta_rec =
  { x : 'a
  ; y : 'a A1.t @@ global
  }
[@@deriving compare ~localize, equal ~localize]

[%%expect
  {|
Line _, characters _-_:
Error: Unbound value A1.compare__local
|}]

type 'a might_need_eta_var =
  | A of 'a
  | B of 'a A1.t @@ global
[@@deriving compare ~localize, equal ~localize]

[%%expect
  {|
Line _, characters _-_:
Error: Unbound value A1.compare__local
|}]
